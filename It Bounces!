#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 20 10:20:04 2017
@author: JamesCevasco
"""
#gravity = 2 pixels per second squared

z1 = 0
z2 = 0
ca = 0
cb = 0

def ballmovementcollision(x,ca,y,cb,t,slope):
    y = slope*(x - ca) + cb

def tUpdate(t,flag):
    if flag:
        t = t + 1
        #print (t)
    return(t)
def xUpdate(t,x,z1,z2,flag,diameter):
    x = 300
    #print (x)
    if x == 0:
        z2 = scoring(z2,flag)
        print(z2)
        x = 200
        t = 0
    if x == 1200:
        z1 = scoring(z1,flag)
        print(z1)
        x = 200
        t = 0
        
    ball_center = (ca,cb)
    hit_criteria = (diameter/1.75) + 25
    distanceheadball = math.sqrt((ball_center[0]-x)**2 + (ball_center[1]-y)**2)
    
    eta = 0.00000000000000000001
    if(hit_criteria >= distanceheadball):
        slope = int((y - cb)/(x - ca + eta))
        
        
    return(t,x,z1,z2,flag,diameter)
def yUpdate(t,y,yvelocity,c,flag):
    if t <= 1:
        yvelocity = 0
    if y > 600:
        y = 625
        yvelocity = (-1 * math.sqrt(2*2*y) )
        print("yvelocity" , yvelocity , "\n")
        t = 1
        c = 625
    y = ( int(yvelocity*t) + int( (t**2) ) + c)
    print("yupdate" , y , "\n\n")
    
    #print (y)
    return(t,y,yvelocity,c)

def scoring(z,flag):
    z = z+1
    print(z)
    return z
    
import numpy as np
import cv2
import math

face_cascade = cv2.CascadeClassifier('/Users/JamesCevasco/Desktop/haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)#0 for computer cam, 1 for logitech cam
width = cap.get(3) #float
height = cap.get(4) #float
print(width,height)

# Define the codec and create VideoWriter object
#fourcc = cv2.VideoWriter_fourcc(*c'XVID')
#out = cv2.VideoWriter('output.avi',fourcc, 20.0, (640,480))
# img = np.zeros((512,512,3), np.uint8)
t = 0
x = 640
y = 0
yvelocity = 0
c = 0
diameter = 0
flag = True
targetScore = 5

while(cap.isOpened()):
    ret, frame = cap.read()
    if ret==True:
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        for (a,b,c,d) in faces:# abcd are just xywh but xyz already used earlier
            diameter = d
            ca = int((2*a+c)/2)
            cb = int((2*b+d)/2)
            cv2.circle(frame, (ca,cb), (int(d/1.75)), (255,0,0), 2)#radius must be changed for different computers/different screens
            roi_gray = gray[b:b+d, a:a+c]
            roi_color = frame[b:b+d, a:a+c]

        t = tUpdate(t,flag)
        t,y,yvelocity,c = yUpdate(t,y,yvelocity,c,flag)    
        t,x,z1,z2,flag,diameter = xUpdate(t,x,z1,z2,flag,diameter)
        
        text1 = "K: " + str(z1)
        text2 = "J: " + str(z2)
    
        frame = cv2.flip(frame,1)
        font = cv2.FONT_HERSHEY_SIMPLEX
        
        cv2.rectangle(frame,(int(0.03125*width),int(0.0694444*height)),(int(0.078125*width),int(0.208333*height)),(255,0,255),-1)
        cv2.putText(frame,text1,(int(0.046875*width),int(0.138888*height)), font, 0.5,(0,0,0),2,cv2.LINE_AA)
        
        cv2.rectangle(frame,(int(0.921875*width),int(0.0694444*height)),(int(0.96875*width),int(0.208333*height)),(0,255,0),-1)
        cv2.putText(frame,text2,(1190,100), font, 0.5,(0,0,0),2,cv2.LINE_AA)
        
        cv2.line(frame,( int(0.03125*width), 0 ),( int(0.03125*width),int(height)),(255,0,255),20)
        cv2.line(frame,( int(0.96875*width), 0 ),( int(0.96875*width),int(height)),(0,255,0),20)
        
        cv2.circle(frame,(x,y), 25, (255,255,255), -1)
        
        if (z1-z2) >= 2 and z1 >= targetScore:
            flag = False
            cv2.rectangle(frame,(150,100),(500,200),(255,0,255),3)
            cv2.putText(frame,"K Wins!",(150,180), font, 3,(255,0,255),2,cv2.LINE_AA)
        if (z2-z1) >= 2 and z2 >= targetScore:
            flag = False
            cv2.rectangle(frame,(150,100),(500,200),(0,255,0),3)
            cv2.putText(frame,"J Wins!",(150,180), font, 3,(0,255,0),2,cv2.LINE_AA)
       
        #out.write(frame)
        cv2.imshow('frame',frame)
        spacebar = cv2.waitKey(32) & 0xff
        if spacebar == 32:
            z1 = 0
            z2 = 0
            t = 0
        escape = cv2.waitKey(27) & 0xFF
        if escape == 27:
            break
    else:
        break
# Release everything if job is finished
cap.release()
#out.release()
cv2.destroyAllWindows()
